{"title":"vue相关知识点(vuex)","date":"2021-09-12T02:15:39.000Z","date_formatted":{"ll":"2021年9月12日","L":"2021/09/12","MM-DD":"09-12"},"thumbnail":"https://i.loli.net/2021/09/12/Z4yFpVrut39dDco.jpg","link":"2021/09/12/vue相关知识点-vuex","comments":true,"tags":["VUE","VUEX"],"categories":["了不起的前端"],"updated":"2021-09-12T02:33:58.146Z","content":"<h1 id=\"1.-vuex是什么\">1. vuex是什么<a title=\"#1.-vuex是什么\" href=\"#1.-vuex是什么\"></a></h1>\n<pre><code>github站点: https://github.com/vuejs/vuex\n在线文档: https://vuex.vuejs.org/zh-cn/\n简单来说: 对应用中组件的状态进行集中式的管理(读/写)\n</code></pre>\n<h1 id=\"2.-状态自管理应用\">2. 状态自管理应用<a title=\"#2.-状态自管理应用\" href=\"#2.-状态自管理应用\"></a></h1>\n<pre><code>state: 驱动应用的数据源\nview: 以声明方式将state映射到视图\nactions: 响应在view上的用户输入导致的状态变化(包含n个更新状态的方法)\n</code></pre>\n<p><img src=\"https://vuex.vuejs.org/zh-cn/images/flow.png\" alt=\"单向数据流\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"3.-多组件共享状态的问题\">3. 多组件共享状态的问题<a title=\"#3.-多组件共享状态的问题\" href=\"#3.-多组件共享状态的问题\"></a></h1>\n<pre><code>多个视图依赖于同一状态\n来自不同视图的行为需要变更同一状态\n以前的解决办法\n\t* 将数据以及操作数据的行为都定义在父组件\n\t* 将数据以及操作数据的行为传递给需要的各个子组件(有可能需要多级传递)\nvuex就是用来解决这个问题的\n</code></pre>\n<p><img src=\"https://vuex.vuejs.org/zh-cn/images/vuex.png\" alt=\"vuex结构\" loading=\"lazy\" class=\"φbp\"></p>\n<h1 id=\"4.-vuex的核心概念\">4. vuex的核心概念<a title=\"#4.-vuex的核心概念\" href=\"#4.-vuex的核心概念\"></a></h1>\n<h2 id=\"1).-state\">1). state<a title=\"#1).-state\" href=\"#1).-state\"></a></h2>\n<pre><code>vuex管理的状态对象\n它应该是唯一的\nconst state = &#123;\n\txxx: initValue\n&#125;\n</code></pre>\n<h2 id=\"2).-mutations\">2). mutations<a title=\"#2).-mutations\" href=\"#2).-mutations\"></a></h2>\n<pre><code>包含多个直接更新state的方法(回调函数)的对象\n谁来触发: action中的commit('mutation名称')\n只能包含同步的代码, 不能写异步代码\nconst mutations = &#123;\n\tyyy (state, data) &#123; \n\t\t// 更新state的某个属性\n\t&#125;\n&#125;\n</code></pre>\n<h2 id=\"3).-actions\">3). actions<a title=\"#3).-actions\" href=\"#3).-actions\"></a></h2>\n<pre><code>包含多个事件回调函数的对象\n通过执行: commit()来触发mutation的调用, 间接更新state\n谁来触发: 组件中: $store.dispatch('action名称')  // 'zzz'\n可以包含异步代码(定时器, ajax)\nconst actions = &#123;\n\tzzz (&#123;commit, state&#125;, data1) &#123;\n\t\tcommit('yyy', data2)\n\t&#125;\n&#125;\n</code></pre>\n<h2 id=\"4).-getters\">4). getters<a title=\"#4).-getters\" href=\"#4).-getters\"></a></h2>\n<pre><code>包含多个计算属性(get)的对象\n谁来读取: 组件中: $store.getters.xxx\nconst getters = &#123;\n\tmmm (state) &#123;\n\t\treturn ...\n\t&#125;\n&#125;\n</code></pre>\n<h2 id=\"5).-modules\">5). modules<a title=\"#5).-modules\" href=\"#5).-modules\"></a></h2>\n<pre><code>包含多个module\n一个module是一个store的配置对象\n与一个组件(包含有共享数据)对应\n</code></pre>\n<h2 id=\"6).-向外暴露store对象\">6). 向外暴露store对象<a title=\"#6).-向外暴露store对象\" href=\"#6).-向外暴露store对象\"></a></h2>\n<pre><code>export default new Vuex.Store(&#123;\n\tstate,\n\tmutations,\n\tactions,\n\tgetters\n&#125;)\n</code></pre>\n<h2 id=\"7).-组件中:\">7). 组件中:<a title=\"#7).-组件中:\" href=\"#7).-组件中:\"></a></h2>\n<pre><code>import &#123;mapGetters, mapActions&#125; from 'vuex'\nexport default &#123;\n\tcomputed: mapGetters(['mmm'])\n\tmethods: mapActions(['zzz'])\n&#125;\n\n&#123;&#123;mmm&#125;&#125; @click=&quot;zzz(data)&quot;\n</code></pre>\n<h2 id=\"8).-映射store\">8). 映射store<a title=\"#8).-映射store\" href=\"#8).-映射store\"></a></h2>\n<pre><code>import store from './store'\nnew Vue(&#123;\n\tstore\n&#125;)\n</code></pre>\n<h2 id=\"9).-store对象\">9). store对象<a title=\"#9).-store对象\" href=\"#9).-store对象\"></a></h2>\n<pre><code>1.所有用vuex管理的组件中都多了一个属性$store, 它就是一个store对象\n2.属性:\n  state: 注册的state对象\n  getters: 注册的getters对象\n3.方法:\n  dispatch(actionName, data): 分发action \n</code></pre>\n<h1 id=\"5.-将vuex引到项目中\">5. 将vuex引到项目中<a title=\"#5.-将vuex引到项目中\" href=\"#5.-将vuex引到项目中\"></a></h1>\n<h2 id=\"1).-下载:-npm-install-vuex---save\">1). 下载: npm install vuex --save<a title=\"#1).-下载:-npm-install-vuex---save\" href=\"#1).-下载:-npm-install-vuex---save\"></a></h2>\n<h2 id=\"2).-使用vuex\">2). 使用vuex<a title=\"#2).-使用vuex\" href=\"#2).-使用vuex\"></a></h2>\n<pre><code>1.store.js\n\timport Vuex from 'vuex'\n\texport default new Vuex.Store(&#123;\n\t\tstate,\n\t\tmutations,\n\t\tactions,\n\t\tgetters,\n\t\tmodules\n\t&#125;)\n2.main.js\n\timport store from './store.js'\n\tnew Vue(&#123;\n\t\tstore\n\t&#125;)\n</code></pre>\n","prev":{"title":"vue相关知识点(原理剖析)","link":"2021/09/12/vue相关知识点-原理剖析"},"next":{"title":"vue相关知识点（vue基本使用）","link":"2021/09/12/vue相关知识点（一）"},"plink":"http://example.com/2021/09/12/vue相关知识点-vuex/","toc":[{"id":"1.-vuex是什么","title":"1. vuex是什么","index":"1"},{"id":"2.-状态自管理应用","title":"2. 状态自管理应用","index":"2"},{"id":"3.-多组件共享状态的问题","title":"3. 多组件共享状态的问题","index":"3"},{"id":"4.-vuex的核心概念","title":"4. vuex的核心概念","index":"4","children":[{"id":"1).-state","title":"1). state","index":"4.1"},{"id":"2).-mutations","title":"2). mutations","index":"4.2"},{"id":"3).-actions","title":"3). actions","index":"4.3"},{"id":"4).-getters","title":"4). getters","index":"4.4"},{"id":"5).-modules","title":"5). modules","index":"4.5"},{"id":"6).-向外暴露store对象","title":"6). 向外暴露store对象","index":"4.6"},{"id":"7).-组件中:","title":"7). 组件中:","index":"4.7"},{"id":"8).-映射store","title":"8). 映射store","index":"4.8"},{"id":"9).-store对象","title":"9). store对象","index":"4.9"}]},{"id":"5.-将vuex引到项目中","title":"5. 将vuex引到项目中","index":"5","children":[{"id":"1).-下载:-npm-install-vuex---save","title":"1). 下载: npm install vuex --save","index":"5.1"},{"id":"2).-使用vuex","title":"2). 使用vuex","index":"5.2"}]}],"reward":true,"copyright":{"license":"自由转载-非商用-禁止演绎-保持署名（<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh\">CC BY-NC-ND 4.0</a>）","link":"<a href=\"http://example.com/2021/09/12/vue相关知识点-vuex/\" title=\"vue相关知识点(vuex)\">http://example.com/2021/09/12/vue相关知识点-vuex/</a>","published":"2021年9月12日","updated":"2021年9月12日"},"reading_time":"610 words in 4 min"}