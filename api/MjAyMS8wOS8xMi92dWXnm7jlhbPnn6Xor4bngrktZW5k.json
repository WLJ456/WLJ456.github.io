{"title":"vue相关知识点(四)","date":"2021-09-12T02:19:29.000Z","date_formatted":{"ll":"2021年9月12日","L":"2021/09/12","MM-DD":"09-12"},"thumbnail":"https://i.loli.net/2021/09/12/4yughzvOZ3twcCA.jpg","link":"2021/09/12/vue相关知识点-end","comments":true,"tags":["VUE","VUEX"],"categories":["了不起的前端"],"updated":"2021-09-12T02:34:16.398Z","content":"<h2 id=\"1.-vue脚手架\">1. vue脚手架<a title=\"#1.-vue脚手架\" href=\"#1.-vue脚手架\"></a></h2>\n<pre><code>用来创建vue项目的工具包\n创建项目:\n    npm install -g vue-cli\n    vue init webpack VueDemo\n开发环境运行:\n    cd VueDemo\n    npm install\n    npm run dev\n生产环境打包发布\n    npm run build\n    npm install -g serve\n    serve dist\n    http://localhost:5000\n</code></pre>\n<h2 id=\"2.-eslint\">2. eslint<a title=\"#2.-eslint\" href=\"#2.-eslint\"></a></h2>\n<pre><code>用来做项目编码规范检查的工具\n基本原理: 定义了很多规则, 检查项目的代码一旦发现违背了某个规则就输出相应的提示信息\n有相应的配置, 可定制检查\n</code></pre>\n<h2 id=\"3.-组件化编程\">3. 组件化编程<a title=\"#3.-组件化编程\" href=\"#3.-组件化编程\"></a></h2>\n<pre><code>vue文件包含3个部分\n    &lt;template&gt;\n      &lt;div&gt;&lt;/div&gt;\n    &lt;/template&gt;\n    &lt;script&gt;\n        export default &#123;\n\t\t  props: []/&#123;&#125;\n          data()&#123;&#125;,\n\t\t  computed: &#123;&#125;\n          methods: &#123;&#125;,\n\t\t  \n\t\t  watch: &#123;&#125;\n\t\t  filters: &#123;&#125;\n\t\t  directives: &#123;&#125;\n\t\t  components: &#123;&#125;\n        &#125;\n    &lt;/script&gt;\n    &lt;style&gt;\n    &lt;/style&gt;\n组件化编码的基本流程\n\t1). 拆分界面, 抽取组件\n\t2). 编写静态组件\n\t3). 编写动态组件\n    \t初始化数据, 动态显示初始化界面\n    \t实现与用户交互功能\n组件通信的5种方式\n\tprops\n\tvue的自定义事件\n\tpubsub第三方库\n\tslot\n\tvuex(后面单独讲)\nprops:\n    父子组件间通信的基本方式\n    属性值的2大类型: \n        一般: 父组件--&gt;子组件\n        函数: 子组件--&gt;父组件\n\t隔层组件间传递: 必须逐层传递(麻烦)\n\t兄弟组件间: 必须借助父组件(麻烦)\nvue自定义事件\n    子组件与父组件的通信方式\n    用来取代function props\n    不适合隔层组件和兄弟组件间的通信\npubsub第三方库(消息订阅与发布)\n    适合于任何关系的组件间通信\nslot\n    通信是带数据的标签\n    注意: 标签是在父组件中解析\nvuex\n    多组件共享状态(数据的管理)\n    组件间的关系也没有限制\n    功能比pubsub强大, 更适用于vue项目\n</code></pre>\n<h2 id=\"4.-ajax\">4. ajax<a title=\"#4.-ajax\" href=\"#4.-ajax\"></a></h2>\n<pre><code>相关库:\n    vue-resource: vue插件, 多用于vue1.x\n    axios: 第三方库, 多用于vue2.x\nvue-resource使用\n    // 引入模块\n    import VueResource from 'vue-resource'\n    // 使用插件\n    Vue.use(VueResource)\n    \n    // 通过vue/组件对象发送ajax请求\n    this.$http.get('/someUrl').then((response) =&gt; &#123;\n      // success callback\n      console.log(response.data) //返回结果数据\n    &#125;, (response) =&gt; &#123;\n      // error callback\n      console.log(response.statusText) //错误信息\n    &#125;)\naxios使用\n    // 引入模块\n    import axios from 'axios'\n    \n    // 发送ajax请求\n    axios.get(url)\n      .then(response =&gt; &#123;\n        console.log(response.data) // 得到返回结果数据\n      &#125;)\n      .catch(error =&gt; &#123;\n    \tconsole.log(error.message)\n      &#125;)\n</code></pre>\n<h2 id=\"5.-vue-router\">5. vue-router<a title=\"#5.-vue-router\" href=\"#5.-vue-router\"></a></h2>\n<pre><code>vue用来实现SPA的插件\n使用vue-router\n    1. 创建路由器: router/index.js\n      new VueRouter(&#123;\n        routes: [\n          &#123; // 一般路由\n            path: '/about',\n            component: about\n          &#125;,\n          &#123; // 自动跳转路由\n            path: '/', \n            redirect: '/about'\n          &#125;\n        ]\n      &#125;)\n    2. 注册路由器: main.js\n       import router from './router'\n       \tnew Vue(&#123;\n       \t\trouter\n       \t&#125;)\n    3. 使用路由组件标签:\n       \t&lt;router-link to=&quot;/xxx&quot;&gt;Go to XXX&lt;/router-link&gt;\n       \t&lt;router-view&gt;&lt;/router-view&gt;\n编写路由的3步\n    1. 定义路由组件    \n    2. 映射路由\n    3. 编写路由2个标签\n嵌套路由\n    children: [\n        &#123;\n          path: '/home/news',\n          component: news\n        &#125;,\n        &#123;\n          path: 'message',\n          component: message\n        &#125;\n     ]\n向路由组件传递数据\n    params: &lt;router-link to=&quot;/home/news/abc/123&quot;&gt;\n    props: &lt;router-view msg='abc'&gt;\n缓存路由组件\n    &lt;keep-alive&gt;\n      &lt;router-view&gt;&lt;/router-view&gt;\n    &lt;/keep-alive&gt;\n路由的编程式导航\n\tthis.$router.push(path): 相当于点击路由链接(可以返回到当前路由界面)\n\tthis.$router.replace(path): 用新路由替换当前路由(不可以返回到当前路由界面)\n\tthis.$router.back(): 请求(返回)上一个记录路由\n</code></pre>\n","next":{"title":"vue相关知识点(原理剖析)","link":"2021/09/12/vue相关知识点-原理剖析"},"plink":"http://example.com/2021/09/12/vue相关知识点-end/","toc":[{"id":"1.-vue脚手架","title":"1. vue脚手架","index":"1"},{"id":"2.-eslint","title":"2. eslint","index":"2"},{"id":"3.-组件化编程","title":"3. 组件化编程","index":"3"},{"id":"4.-ajax","title":"4. ajax","index":"4"},{"id":"5.-vue-router","title":"5. vue-router","index":"5"}],"reward":true,"copyright":{"license":"自由转载-非商用-禁止演绎-保持署名（<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh\">CC BY-NC-ND 4.0</a>）","link":"<a href=\"http://example.com/2021/09/12/vue相关知识点-end/\" title=\"vue相关知识点(四)\">http://example.com/2021/09/12/vue相关知识点-end/</a>","published":"2021年9月12日","updated":"2021年9月12日"},"reading_time":"793 words in 5 min"}