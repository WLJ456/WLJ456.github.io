{"title":"vue相关知识点（vue基本使用）","date":"2021-09-12T02:10:51.000Z","date_formatted":{"ll":"2021年9月12日","L":"2021/09/12","MM-DD":"09-12"},"thumbnail":"https://i.loli.net/2021/09/12/JLr1OwaNfMC5KTn.jpg","link":"2021/09/12/vue相关知识点（一）","comments":true,"tags":["VUE"],"categories":["了不起的前端"],"updated":"2021-09-12T02:25:36.142Z","content":"<h1 id=\"1.-vue.js是什么?\">1. Vue.js是什么?<a title=\"#1.-vue.js是什么?\" href=\"#1.-vue.js是什么?\"></a></h1>\n<pre><code>1). 一位华裔前Google工程师(尤雨溪)开发的前端js库\n2). 作用: 动态构建用户界面\n3). 特点:\n\t* 遵循MVVM模式\n\t* 编码简洁, 体积小, 运行效率高, 移动/PC端开发\n\t* 它本身只关注UI, 可以轻松引入vue插件和其它第三库开发项目\n4). 与其它框架的关联:\n\t* 借鉴angular的模板和数据绑定技术\n\t* 借鉴react的组件化和虚拟DOM技术\n5). vue包含一系列的扩展插件(库):\n\t* vue-cli: vue脚手架\n\t* vue-resource(axios): ajax请求\n\t* vue-router: 路由\n\t* vuex: 状态管理\n\t* vue-lazyload: 图片懒加载\n\t* vue-scroller: 页面滑动相关\n\t* mint-ui: 基于vue的组件库(移动端)\n\t* element-ui: 基于vue的组件库(PC端)\n</code></pre>\n<h1 id=\"2.-基本使用\">2. 基本使用<a title=\"#2.-基本使用\" href=\"#2.-基本使用\"></a></h1>\n<pre><code>1). 引入vue.js\n2). 创建Vue实例对象(vm), 指定选项(配置)对象\n\tel : 指定dom标签容器的选择器\n\tdata : 指定初始化状态数据的对象/函数(返回一个对象)\n3). 在页面模板中使用&#123;&#123;&#125;&#125;或vue指令\n\t\t\n# 3. Vue对象的选项\n## 1). el\n\t指定dom标签容器的选择器\n\tVue就会管理对应的标签及其子标签\n\n## 2). data\n\t对象或函数类型\n\t指定初始化状态属性数据的对象\n\tvm也会自动拥有data中所有属性\n\t页面中可以直接访问使用\n\t数据代理: 由vm对象来代理对data中所有属性的操作(读/写)\n## 3). methods\n\t包含多个方法的对象\n\t供页面中的事件指令来绑定回调\n\t回调函数默认有event参数, 但也可以指定自己的参数\n\t所有的方法由vue对象来调用, 访问data中的属性直接使用this.xxx\n\n## 4). computed\n\t包含多个方法的对象\n\t对状态属性进行计算返回一个新的数据, 供页面获取显示\n\t一般情况下是相当于是一个只读的属性\n\t利用set/get方法来实现属性数据的计算读取, 同时监视属性数据的变化\n\t如何给对象定义get/set属性\n\t\t在创建对象时指定: get name () &#123;return xxx&#125; / set name (value) &#123;&#125;\n\t  \t对象创建之后指定: Object.defineProperty(obj, age, &#123;get()&#123;&#125;, set(value)&#123;&#125;&#125;)\n</code></pre>\n<h2 id=\"5).-watch\">5). watch<a title=\"#5).-watch\" href=\"#5).-watch\"></a></h2>\n<pre><code>包含多个属性监视的对象\n分为一般监视和深度监视\n    xxx: function(value)&#123;&#125;\n\txxx : &#123;\n\t\tdeep : true,\n\t\thandler : fun(value)\n\t&#125;\n另一种添加监视方式: vm.$watch('xxx', function(value)&#123;&#125;)\n</code></pre>\n<h1 id=\"4.-过渡动画\">4. 过渡动画<a title=\"#4.-过渡动画\" href=\"#4.-过渡动画\"></a></h1>\n<pre><code>利用vue去操控css的transition/animation动画\n模板: 使用&lt;transition name='xxx'&gt;包含带动画的标签\ncss样式\n\t.fade-enter-active: 进入过程, 指定进入的transition\n\t.fade-leave-active: 离开过程, 指定离开的transition\n\t.xxx-enter, .xxx-leave-to: 指定隐藏的样式\n编码例子\n    .xxx-enter-active, .xxx-leave-active &#123;\n      transition: opacity .5s\n    &#125;\n    .xxx-enter, .xxx-leave-to &#123;\n      opacity: 0\n    &#125;\n    \n    &lt;transition name=&quot;xxx&quot;&gt;\n      &lt;p v-if=&quot;show&quot;&gt;hello&lt;/p&gt;\n    &lt;/transition&gt;\n</code></pre>\n<h1 id=\"5.-生命周期\">5. 生命周期<a title=\"#5.-生命周期\" href=\"#5.-生命周期\"></a></h1>\n<pre><code>vm/组件对象\n生命周期图\n主要的生命周期函数(钩子)\n\tcreated() / mounted(): 启动异步任务(启动定时器,发送ajax请求, 绑定监听)\n\tbeforeDestroy(): 做一些收尾的工作\n</code></pre>\n<h1 id=\"6.-自定义过滤器\">6. 自定义过滤器<a title=\"#6.-自定义过滤器\" href=\"#6.-自定义过滤器\"></a></h1>\n<h2 id=\"1).-理解\">1). 理解<a title=\"#1).-理解\" href=\"#1).-理解\"></a></h2>\n<pre><code>对需要显示的数据进行格式化后再显示\n</code></pre>\n<h2 id=\"2).-编码\">2). 编码<a title=\"#2).-编码\" href=\"#2).-编码\"></a></h2>\n<pre><code>1). 定义过滤器\n\tVue.filter(filterName, function(value[,arg1,arg2,...])&#123;\n\t  // 进行一定的数据处理\n\t  return newValue\n\t&#125;)\n2). 使用过滤器\n\t&lt;div&gt;&#123;&#123;myData | filterName&#125;&#125;&lt;/div&gt;\n\t&lt;div&gt;&#123;&#123;myData | filterName(arg)&#125;&#125;&lt;/div&gt;\n</code></pre>\n<h1 id=\"7.-vue内置指令\">7. vue内置指令<a title=\"#7.-vue内置指令\" href=\"#7.-vue内置指令\"></a></h1>\n<pre><code>v-text/v-html: 指定标签体\n\t* v-text : 当作纯文本\n\t* v-html : 将value作为html标签来解析\nv-if v-else v-show: 显示/隐藏元素\n\t* v-if : 如果vlaue为true, 当前标签会输出在页面中\n\t* v-else : 与v-if一起使用, 如果value为false, 将当前标签输出到页面中\n\t* v-show: 就会在标签中添加display样式, 如果vlaue为true, display=block, 否则是none\nv-for : 遍历\n\t* 遍历数组 : v-for=&quot;(person, index) in persons&quot;   \n\t* 遍历对象 : v-for=&quot;value in person&quot;   $key\nv-on : 绑定事件监听\n\t* v-on:事件名, 可以缩写为: @事件名\n\t* 监视具体的按键: @keyup.keyCode   @keyup.enter\n\t* 停止事件的冒泡和阻止事件默认行为: @click.stop   @click.prevent\n\t* 隐含对象: $event\nv-bind : 强制绑定解析表达式  \n\t* html标签属性是不支持表达式的, 就可以使用v-bind\n\t* 可以缩写为:  :id='name'\n\t* :class\n\t  * :class=&quot;a&quot;\n\t\t* :class=&quot;&#123;classA : isA, classB : isB&#125;&quot;\n\t\t* :class=&quot;[classA, classB]&quot;\n\t* :style\n\t\t:style=&quot;&#123;color : color&#125;&quot;\nv-model\n\t* 双向数据绑定\n\t* 自动收集用户输入数据\nref : 标识某个标签\n\t* ref='xxx'\n\t* 读取得到标签对象: this.$refs.xxx\n</code></pre>\n<h1 id=\"8.-自定义指令\">8. 自定义指令<a title=\"#8.-自定义指令\" href=\"#8.-自定义指令\"></a></h1>\n<h2 id=\"1).-注册全局指令\">1). 注册全局指令<a title=\"#1).-注册全局指令\" href=\"#1).-注册全局指令\"></a></h2>\n<pre><code>Vue.directive('my-directive', function(el, binding)&#123;\n  el.innerHTML = binding.value.toUpperCase()\n&#125;)\n</code></pre>\n<h2 id=\"2).-注册局部指令\">2). 注册局部指令<a title=\"#2).-注册局部指令\" href=\"#2).-注册局部指令\"></a></h2>\n<pre><code>directives : &#123;\n  'my-directive' : function(el, binding) &#123;\n      el.innerHTML = binding.value.toUpperCase()\n  &#125;\n&#125;\n</code></pre>\n<h2 id=\"3).-使用指令\">3). 使用指令<a title=\"#3).-使用指令\" href=\"#3).-使用指令\"></a></h2>\n<pre><code>&lt;div v-my-directive='xxx'&gt;\n</code></pre>\n","prev":{"title":"vue相关知识点(vuex)","link":"2021/09/12/vue相关知识点-vuex"},"next":{"title":"vue面试题","link":"2021/09/05/vue面试题"},"plink":"http://example.com/2021/09/12/vue相关知识点（一）/","toc":[{"id":"1.-vue.js是什么?","title":"1. Vue.js是什么?","index":"1"},{"id":"2.-基本使用","title":"2. 基本使用","index":"2","children":[{"id":"5).-watch","title":"5). watch","index":"2.1"}]},{"id":"4.-过渡动画","title":"4. 过渡动画","index":"3"},{"id":"5.-生命周期","title":"5. 生命周期","index":"4"},{"id":"6.-自定义过滤器","title":"6. 自定义过滤器","index":"5","children":[{"id":"1).-理解","title":"1). 理解","index":"5.1"},{"id":"2).-编码","title":"2). 编码","index":"5.2"}]},{"id":"7.-vue内置指令","title":"7. vue内置指令","index":"6"},{"id":"8.-自定义指令","title":"8. 自定义指令","index":"7","children":[{"id":"1).-注册全局指令","title":"1). 注册全局指令","index":"7.1"},{"id":"2).-注册局部指令","title":"2). 注册局部指令","index":"7.2"},{"id":"3).-使用指令","title":"3). 使用指令","index":"7.3"}]}],"reward":true,"copyright":{"license":"自由转载-非商用-禁止演绎-保持署名（<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh\">CC BY-NC-ND 4.0</a>）","link":"<a href=\"http://example.com/2021/09/12/vue相关知识点（一）/\" title=\"vue相关知识点（vue基本使用）\">http://example.com/2021/09/12/vue相关知识点（一）/</a>","published":"2021年9月12日","updated":"2021年9月12日"},"reading_time":"1181 words in 8 min"}