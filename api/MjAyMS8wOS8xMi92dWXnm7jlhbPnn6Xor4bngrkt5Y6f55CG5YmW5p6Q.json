{"title":"vue相关知识点(原理剖析)","date":"2021-09-12T02:17:39.000Z","date_formatted":{"ll":"2021年9月12日","L":"2021/09/12","MM-DD":"09-12"},"thumbnail":"https://i.loli.net/2021/09/12/DBszm9KISaRhxo8.jpg","link":"2021/09/12/vue相关知识点-原理剖析","comments":true,"tags":["VUE","VUEX"],"categories":["了不起的前端"],"updated":"2021-09-12T02:34:40.853Z","content":"<h2 id=\"1.-准备\">1. 准备<a title=\"#1.-准备\" href=\"#1.-准备\"></a></h2>\n<pre><code>1.[].slice.call(lis): 将伪数组转换为真数组\n2.node.nodeType: 得到节点类型\n3.Object.defineProperty(obj, propertyName, &#123;&#125;): 给对象添加/修改属性(指定描述符)\n\tconfigurable: true/false  是否可以重新define\n\tenumerable: true/false 是否可以枚举(for..in / keys())\n\tvalue: 指定初始值\n\twritable: true/false value是否可以修改存取(访问)描述符\n\tget: 函数, 用来得到当前属性值\n\tset: 函数, 用来监视当前属性值的变化\n4.Object.keys(obj): 得到对象自身可枚举的属性名的数组\n5.DocumentFragment: 文档碎片(高效批量更新多个节点)\n6.obj.hasOwnProperty(prop): 判断prop是否是obj自身的属性\n</code></pre>\n<h2 id=\"2.-数据代理(mvvm.js)\">2. 数据代理(MVVM.js)<a title=\"#2.-数据代理(mvvm.js)\" href=\"#2.-数据代理(mvvm.js)\"></a></h2>\n<pre><code>1.通过一个对象代理对另一个对象中属性的操作(读/写)\n2.通过vm对象来代理data对象中所有属性的操作\n3.好处: 更方便的操作data中的数据\n4.基本实现流程\n\t1). 通过Object.defineProperty()给vm添加与data对象的属性对应的属性描述符\n\t2). 所有添加的属性都包含getter/setter\n\t3). 在getter/setter内部去操作data中对应的属性数据\n</code></pre>\n<h2 id=\"3.-模板解析(compile.js)\">3. 模板解析(compile.js)<a title=\"#3.-模板解析(compile.js)\" href=\"#3.-模板解析(compile.js)\"></a></h2>\n<pre><code>1.模板解析的关键对象: compile对象\n2.模板解析的基本流程:\n\t1). 将el的所有子节点取出, 添加到一个新建的文档fragment对象中\n\t2). 对fragment中的所有层次子节点递归进行编译解析处理\n    \t* 对表达式文本节点进行解析\n    \t* 对元素节点的指令属性进行解析\n        \t* 事件指令解析\n        \t* 一般指令解析\n  \t3). 将解析后的fragment添加到el中显示\n3.解析表达式文本节点: textNode.textContent = value\n  \t1). 根据正则对象得到匹配出的表达式字符串: 子匹配/RegExp.$1\n  \t2). 从data中取出表达式对应的属性值\n  \t3). 将属性值设置为文本节点的textContent\n4.事件指令解析: elementNode.addEventListener(事件名, 回调函数.bind(vm))\n    v-on:click=&quot;test&quot;\n  \t1). 从指令名中取出事件名\n  \t2). 根据指令的值(表达式)从methods中得到对应的事件处理函数对象\n  \t3). 给当前元素节点绑定指定事件名和回调函数的dom事件监听\n  \t4). 指令解析完后, 移除此指令属性\n5.一般指令解析: elementNode.xxx = value\n  \t1). 得到指令名和指令值(表达式)\n  \t2). 从data中根据表达式得到对应的值\n  \t3). 根据指令名确定需要操作元素节点的什么属性\n        * v-text---textContent属性\n        * v-html---innerHTML属性\n        * v-class--className属性\n  \t4). 将得到的表达式的值设置到对应的属性上\n  \t5). 移除元素的指令属性\n</code></pre>\n<h2 id=\"4.-数据劫持--&gt;数据绑定\">4. 数据劫持–&gt;数据绑定<a title=\"#4.-数据劫持--&gt;数据绑定\" href=\"#4.-数据劫持--&gt;数据绑定\"></a></h2>\n<pre><code>1.数据绑定(model==&gt;View):\n\t1). 一旦更新了data中的某个属性数据, 所有界面上直接使用或间接使用了此属性的节点都会更新(更新)\n2.数据劫持\n\t1). 数据劫持是vue中用来实现数据绑定的一种技术\n\t2). 基本思想: 通过defineProperty()来监视data中所有属性(任意层次)数据的变化, 一旦变化就去更新界面\n3.四个重要对象\n\t1). Observer\n\t\t* 用来对data所有属性数据进行劫持的构造函数\n      \t* 给data中所有属性重新定义属性描述(get/set)\n      \t* 为data中的每个属性创建对应的dep对象\n    2). Dep(Depend)\n      \t* data中的每个属性(所有层次)都对应一个dep对象\n      \t* 创建的时机:\n        \t* 在初始化define data中各个属性时创建对应的dep对象\n        \t* 在data中的某个属性值被设置为新的对象时\n      \t* 对象的结构\n\t        &#123;\n\t          id, // 每个dep都有一个唯一的id\n\t          subs //包含n个对应watcher的数组(subscribes的简写)\n\t        &#125;\n\t\t* subs属性说明\n\t\t\t* 当一个watcher被创建时, 内部会将当前watcher对象添加到对应的dep对象的subs中\n\t\t\t* 当此data属性的值发生改变时, 所有subs中的watcher都会收到更新的通知, 从而最终更新对应的界面\n\t3). Compile\n\t\t* 用来解析模板页面的对象的构造函数(一个实例)\n\t\t* 利用compile对象解析模板页面\n\t\t* 每解析一个表达式(非事件指令)都会创建一个对应的watcher对象, 并建立watcher与dep的关系\n\t\t* complie与watcher关系: 一对多的关系\n\t4). Watcher\n      \t* 模板中每个非事件指令或表达式都对应一个watcher对象\n      \t* 监视当前表达式数据的变化\n      \t* 创建的时机: 在初始化编译模板时\n      \t* 对象的组成\n\t\t\t&#123;\n\t          vm,  //vm对象\n\t          exp, //对应指令的表达式\n\t          cb, //当表达式所对应的数据发生改变的回调函数\n\t          value, //表达式当前的值\n\t          depIds //表达式中各级属性所对应的dep对象的集合对象\n\t                  //属性名为dep的id, 属性值为dep\n\t\t\t&#125;\n\t\t\n\t5). 总结: dep与watcher的关系: 多对多\n\t\t* 一个data中的属性对应对应一个dep, 一个dep中可能包含多个watcher(模板中有几个表达式使用到了属性)\n\t\t* 模板中一个非事件表达式对应一个watcher, 一个watcher中可能包含多个dep(表达式中包含了几个data属性)\n\t\t* 数据绑定使用到2个核心技术\n\t\t\t* defineProperty()\n\t\t\t* 消息订阅与发布\n\n4.双向数据绑定\n\t1). 双向数据绑定是建立在单向数据绑定(model==&gt;View)的基础之上的\n\t2). 双向数据绑定的实现流程:\n      \t* 在解析v-model指令时, 给当前元素添加input监听\n      \t* 当input的value发生改变时, 将最新的值赋值给当前表达式所对应的data属性\n</code></pre>\n","prev":{"title":"vue相关知识点(四)","link":"2021/09/12/vue相关知识点-end"},"next":{"title":"vue相关知识点(vuex)","link":"2021/09/12/vue相关知识点-vuex"},"plink":"http://example.com/2021/09/12/vue相关知识点-原理剖析/","toc":[{"id":"1.-准备","title":"1. 准备","index":"1"},{"id":"2.-数据代理(mvvm.js)","title":"2. 数据代理(MVVM.js)","index":"2"},{"id":"3.-模板解析(compile.js)","title":"3. 模板解析(compile.js)","index":"3"},{"id":"4.-数据劫持-->数据绑定","title":"4. 数据劫持–&gt;数据绑定","index":"4"}],"reward":true,"copyright":{"license":"自由转载-非商用-禁止演绎-保持署名（<a href=\"http://creativecommons.org/licenses/by-nc-nd/4.0/deed.zh\">CC BY-NC-ND 4.0</a>）","link":"<a href=\"http://example.com/2021/09/12/vue相关知识点-原理剖析/\" title=\"vue相关知识点(原理剖析)\">http://example.com/2021/09/12/vue相关知识点-原理剖析/</a>","published":"2021年9月12日","updated":"2021年9月12日"},"reading_time":"1452 words in 10 min"}